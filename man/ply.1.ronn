ply(1) -- dynamically instrument the kernel
===========================================

## SYNOPSIS

`ply` <program-file> <br>
`ply` -c <program-text>

## DESCRIPTION

ply dynamically instruments the running kernel to aggregate and
extract user-defined data. It compiles an input program to one or more
Linux BPF binaries and attaches them to arbitrary points in the kernel
using kprobes.

## OPTIONS

  * `-c`, `--command`:
    The program is supplied as an argument, rather than in a file.

  * `-d`, `--debug`:
    Enable debugging output.

  * `-D`, `--dump`:
    Do not execute the program, instead dump the generated Linux BPF
    instructions.

  * `-t`, `--timeout`=<seconds>:
    Terminate the program after the specified time.

## SYNTAX

The syntax is C-like in general, taking its inspiration from awk(1).

### Probes

A program consists of one or more _probes_, which are analogous to
awk's pattern-action statements. The syntax for a probe is as follows:

    provider:probe-definition [/ predicate /]
    {
         statement;
        [statement; ... ]
    }

The _provider_ selects which probe interface to use. At the moment,
`kprobe` is the only supported provider, but the intention is that
this can be extended with `uprobe` for example. It is then up to the
provider to parse the _probe-definition_ to determine the point(s) of
instrumentation.

Due to the limitations imposed by the kernel on Linux BPF programs, no
loop constructs are allowed. Conditionals could be implemented but
have thus far not been. However, it is possible to perform some
filtering by specifying a _predicate_, i.e. an expression that must
evaluate to _true_ in order for the probe to be executed.

Then follows the _statements_ that perform the actual information
gathering. All but the last statement of a probe must be terminated
with a semi-colon. Specifically, a simple probe containing only one
statement does not need one.


### Maps and Variables

The primary way to extract information is to store it in user-defined
variables. Like in awk(1) they are dynamically created and their types
are inferred. ply uses a very simple type system with 3 types:

  * `Numbers`:
    Represented as 64-bit signed integers, initialized to zero (0).

  * `Strings`:
    Of arbitrary length, initialized to the empty string.

  * `Records`:
    Compound type holding any number of `Numbers` and `Strings` with
    each component initialized to its zero value.

The syntax is as follows:

    $varname
    $mapname[expression <, expression ... >]

Variable names follow the familiar rules of C identifiers, with the
added constraints that they must begin with a dollar sign (`$`). A map
is simply a variable concatenated with a record, i.e one or more
expressions that are used as the index into the map.

The simplest way to store data in variables is to assign a value to
them:

    $varname = expression

If a variable is assigned the special value _nil_, the variable is
deleted and will return its zero value if referenced again.

A more common way to store data is to use _methods_, i.e. functions
that operate on the data stored in a variable or map:

    $varname.method([expression, expression ... ])

  * `.count()`:
    Bumps a counter.

  * `.quantize(number-expression)`:
    Evaluates the argument and aggregates on the most significant bit
    of the result. In other words, it stores the distribution of the
    expression.


## BUILT-INS

Each _provider_ may declare any number of built-in functions. Function
calls use the same syntax as most languages that inherit from
C. Additionally, functions which take no argument may be called
without parenthesis, giving them a feel of being built-in variables.

The following built-ins are defined by the _kprobe_ provider:


  * `arg(number)` => number:
    Returns the value of the specified _argument_ of the function to which
    the probe was attached. arg(0) is the 1st argument, arg(1) is the 2nd,
    and so on.

  * `comm`, `execname` => string:
    Returns the _name_ of the running process's executable.

  * `cpu` => number:
    Returns the _CPU ID_ of the processor on which the probe fired.

  * `func`, `probefunc` => number:
    Returns the kernel address of the _function_ to which the probe
    was attached.

  * `gid` => number:
    Returns the _group ID_ of the running process.

  * `log2(number-expression)` => number:
    Returns the logarithm, base 2, of the argument.

  * `nsecs` => number:
    Returns the time since the system started, in nanoseconds.

  * `pid` => number:
    Returns the _process ID_ of the running process.

  * `printf(format [, expression, expression ... ])`:
    Prints _formatted output_ to ply's standard out.

    Beware that while there are times when it is useful to print data
    from a probe, it is very often not the best way of obtaining the
    insight that is sought.

    Many of the kernel's functions may be called at rates well above
    the 1k calls/s mark, at which point making sense of print output
    becomes very hard. In such cases, consider using some type of
    aggregation to limit the amount of data. Then, once you have
    zeroed in on the problem, printing might become useful.

  * `reg(number)`, `reg(string)` => number:
    If called with a number, it returns the value of the n:th CPU
    _register_, according to the order in the architecture specific
    _pt_regs_ struct. If called with a string, the string is looked up
    against the register names as they are defined in the _pt_regs_
    struct.

  * `secs` => number:
    Returns the time since the system started, in seconds.

  * `strcmp(string-expression, string-expression)` => number:
    Returns -1, 0 or 1 if the first argument is less than, equal to or
    greater than the second argument respectively. Strings are
    compared by their lexicographical order.

  * `tgid` => number:
    Returns the _thread group ID_ of the running process.

  * `uid` => number:
    Returns the _user ID_ of the running process.


## EXAMPLE

### Count

Count the number of times any process in the system calls open(2):

    kprobe:SyS_open
    {
        $opens.count()
    }


Count the number of calls to open(2), grouped by executable name:

    kprobe:SyS_open
    {
        $opens[execname].count()
    }


### Quantize

Record the distribution of the _size_ argument to read(2):

    kprobe:SyS_read
    {
        $dist.quantize(arg(2))
    }


### Wildcards

Count all syscalls made on the system, grouped by function:

    kprobe:SyS_*
    {
        $syscalls[func].count()
    }


Count all syscalls made by every dd(1) process, grouped by function:

    kprobe:SyS_* / !strcmp(execname, "dd") /
    {
        $syscalls[func].count()
    }


### Object Tracking

Record the distribution of the time it takes an _skb_ to go from
_netif_receive_ to _ip_rcv_:

    kprobe:__netif_receive_skb_core
    {
        $rx[arg(0)] = nsecs
    }

    kprobe:ip_rcv / $rx[arg(0)] /
    {
        $rx2ip.quantize(nsecs - $rx[arg(0)]);
        $rx[arg(0)] = nil;
    }


## RETURN VALUE

  * `0`:
    Program was successfully compiled and loaded into the kernel.

  * `Non-Zero`:
    An error occurred during compilation or during kernel setup.


## AUTHORS

Tobias Waldekranz <tobias@waldekranz.com>

## COPYRIGHT

Copyright 2015-2016 Tobias Waldekranz

License: GPLv2


## SEE ALSO

awk(1)
